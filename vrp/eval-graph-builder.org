#+TITLE: Eval Graph Builder
#+AUTHOR: Rodrigo Garía G#+EMAIL: rodrigo.garcia21111@gmail.com


* Description 
In this file we'll define how to build and work over an evaluation graph, using the classes and methods defined in =eval-classes.org= and =eval-methods.org= files. The src code blocks will be tangled to ../src/eval-graph-builder.lisp

* Add the package to the tangled file
  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp 
    (in-package :vrp)
  #+END_SRC

* auxiliar
** exploration macros 
*** documentation
These macros will be used to make the automatic evaluation during exploration
*** do-operations
**** documentation
This is a tricky one. The evaluation of the new solution must be performed after
the tape had been "physically" modified. Then we make only the required evaluations
without making them twice when there is no need. The operations are done in a certain
order. This macro is the one which manages that process.

All the exploration operations must be declared as =(do-operations <list of operations>)=

**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
(defmacro do-operations (ops)
    `(let* ((visited-op (make-hash-table))
            (queue ()))
       (progn
         (loop for op in (list ,@ops)
             do (let* ((evaluations (apply (car op) (cdr op))))
                   (loop for e in evaluations
                       do (if (not (gethash e visited-op))
                              (progn 
                                  (setf queue (append queue `(,e)))
                                  (setf (gethash e visited-op) t))))))
          (loop while queue
              do (let* ((nxt (car queue))
                        (to-insert (apply (car nxt) (cdr nxt))))
                       (progn
                          (setf queue (cdr queue))
                          (if (and to-insert (not (gethash to-insert visited-op)))
                              (progn 
                                  (setf queue (append queue `(,to-insert)))
                                  (setf (gethash to-insert visited-op) t)))))))))
#+END_SRC


** functions
*** do-suite-operations
**** documentation
Here we define a function to convert a set of vrp-suite operations (=op-insert-client=, =op-select-client=) into eval-operations (=remove-client-from=, =insert-client-to=) and then call the =do-operations= macro. It recives the evaluation graph and the list of operations 
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
  (defun do-suite-operations (graph ops)
    (loop for op in ops do
      (let* ((converted-op (convert-op op graph))
	     (op (car converted-op))
	     (a (car (cdr converted-op)))
	     (b (car (cdr (cdr converted-op))))
	     (c (car (cdr (cdr (cdr converted-op))))))
	(funcall op a b c graph))))

#+END_SRC


*** undo-suite-operations
**** documentation
Here we define a function to convert a set of vrp-suite operations (=op-insert-client=, =op-select-client=) into reverted eval-operations (=remove-client-from=, =insert-client-to=) and then call the =do-operations= macro. It recives the evaluation graph and the list of operations 
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
  (defun undo-suite-operations (graph ops)
    (loop for op in (reverse ops) do
      (let* ((converted-op (revert-op op graph))
	     (op (car converted-op))
	     (a (car (cdr converted-op)))
	     (b (car (cdr (cdr converted-op))))
	     (c (car (cdr (cdr (cdr converted-op))))))
	(funcall op a b c graph))))

#+END_SRC



*** neigh-tree-solution
**** documentation
This function recives a solution and returns a clone that has all the depots removed from the routes.
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
  (defun neigh-tree-solution (solution)
    (let ((new-solution (clone solution)))
(loop for r in (routes new-solution) do
(setf (clients r) (reverse (cdr (reverse (clients r)))))
)
new-solution))

#+END_SRC
**** test
**** code
#+BEGIN_SRC lisp +n -r :results output :exports none 
  (let* (
   (c1 (basic-cvrp-client 1 1))
   (c2 (basic-cvrp-client 2 7))
   (c3 (basic-cvrp-client 3 4))
   (c4 (basic-cvrp-client 4 3))
   (c5 (basic-cvrp-client 5 2))
   (c6 (basic-cvrp-client 6 1))

   (v1 (cvrp-vehicle 1 9))
   (v2 (cvrp-vehicle 2 18))

   (d0 (basic-depot))

   ;; Solution for the eval-graph
   ;; remember to start and end all the routes with depot
   ;; the starting depot is placed in the previous-client slot
   (r1 (route-for-simulation :id 1 :vehicle v1 :depot d0
					  :clients (list c1 c2 c3 (clone d0)) :previous-client (clone d0)))
   (r2 (route-for-simulation :id 2 :vehicle v2 :depot d0
					  :clients (list c4 c5 c6 (clone d0)) :previous-client (clone d0)))

   (s1 (basic-solution :id 1 :routes (list r1 r2)))

   (s2 (neigh-tree-solution s1)))

   (format t "~a" s2))


#+END_SRC

#+RESULTS:
: S1: (0)
: routes:
:   <r1: <cv:1. 0/9> (<d:0>: (<c1: 1> <c2: 7> <c3: 4>))>
:   <r2: <cv:2. 0/18> (<d:0>: (<c4: 3> <c5: 2> <c6: 1>))>


** beautify macros
*** documentation
This macros will be used to make the evaluation code cleaner
and to get rid of those quotes and back quotes
*** def-var
**** documentation
To define a variable
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
(defmacro def-var (name init-value graph)
    `(defallocable ',name ,init-value ,graph))
#+END_SRC

*** increment-distance
**** documentation
To increment a variable with the distance between two clients
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
(defmacro increment-distance (from-client to-client incremented-var distance-matrix graph)
    `(move-node-from-to ,from-client ,to-client ',incremented-var ,distance-matrix ,graph))
#+END_SRC
*** increment-value
**** documentation
To increment the value of a target variable in a certain amount
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
(defmacro increment-value (target-var value graph)
    `(increment-with ',target-var ',value ,graph))
#+END_SRC
*** return-value
**** documentation
To mark a variable as the one that contains the result of the evaluation.
This is the equivalent to a return statement in a function code
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
  (defmacro return-value (var graph)
    `(set-output ',var ,graph))
#+END_SRC
*** decrement-demand
**** documentation
To decrement the demand of the route by delivering the cargo to a client
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
(defmacro decrement-demand (target-client demand-var graph)
    `(deliver ,target-client ',demand-var ,graph))
#+END_SRC
*** apply-penalty
**** documentation
To penalize a solution when the variable that holds the route demands goes negative.
That means the capacity of the vehicle which attends the route is not enough. The
penalty operations increments the value of the variable that holds the result of the
evaluation by a given factor of the amount of demand that exceded the vehicle capacity.
**** code
#+BEGIN_SRC lisp +n -r :results none :exports none :tangle ../src/eval-graph-builder.lisp
  (defmacro apply-penalty (demand-var result-var penalty-factor graph)
    `(penalize ',demand-var ',result-var ,penalty-factor ,graph))
#+END_SRC


* build graph functions
** documentation
Now we define the actions we can perform using =graph-builder=.
** init-graph
**** documentation
This method initializes the =eval-graph= class and convert the given solution in nodes.
**** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
  (defmethod init-graph ((s basic-solution))
      (let ((graph (new-eval-graph :solution-track s)))
      (convert-to-node s graph)
      graph))
#+END_SRC

**** test
#+BEGIN_SRC lisp +n -r :results output :exports both :tangle ../src/eval-graph-builder-test.lisp
    (with-basic-clients (1 2 3 4 5 6)
	  (let* ((v1 (basic-vehicle 1))
		 (v2 (basic-vehicle 2))
		 (d0 (basic-depot))
		 (r1 (basic-route :id 1 :vehicle v1 :depot d0
				  :clients (list c1 c2 c3)))
		 (r2 (basic-route :id 2 :vehicle v2 :depot d0
				  :clients (list c4 c5 c6)))
		 (s (basic-solution :id 1 :routes (list r1 r2)))
		 (graph (init-graph s)))

	    (format t "~a~%" graph)))
 
            
#+END_SRC

#+RESULTS:
#+begin_example
<EVAL-GRAPH: 
 output: NIL  
 inputs: 
  <Cliient node <c:1>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  <Cliient node <c:2>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  <Cliient node <c:3>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  Vehicle node, content: <v:1>, accumulator: NIL>
  <Input node, content: <r1: <v:1> (<d:0>: (<c:1> <c:2> <c:3>))>>
  <Cliient node <c:4>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  <Cliient node <c:5>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  <Cliient node <c:6>, 
     first-distance-calculator: NIL, 
     second-distance-calculator: NIL, 
     demand-calculator: NIL>
  Vehicle node, content: <v:2>, accumulator: NIL>
  <Input node, content: <r2: <v:2> (<d:0>: (<c:4> <c:5> <c:6>))>>
 
 solution-track: S1: (0)
routes:
  <r1: <v:1> (<d:0>: (<c:1> <c:2> <c:3>))>
  <r2: <v:2> (<d:0>: (<c:4> <c:5> <c:6>))>
>
#+end_example

** move-node-from-to
*** documentation
This method sums the distance between =from-client= and =to-client= but also makes the related changes in the graph.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
  (defun move-node-from-to (c1 c2 output-slot d-matrix graph)
    (let* ((input1 (gethash c1 (class-to-io graph)))
	   (input2 (gethash c2 (class-to-io graph)))
	   (out-node (gethash output-slot (slot-to-output graph)))
	   (d-node (new-increment-distance-node 
		    :output-action out-node
		    :from-client input1
		    :to-client input2 
		    :distance-matrix d-matrix)))

      (progn
	(setf (second-distance-calculator input1) d-node)
	(setf (first-distance-calculator input2) d-node)
	(evaluate-low-level-node d-node))))
#+END_SRC

*** test
#+BEGIN_SRC lisp +n -r :results output :exports both :tangle ../src/eval-graph-builder-test.lisp
  (with-basic-clients (1 2)
    (let* ((v1 (basic-vehicle 1))
	   (d0 (basic-depot))
	   (r1 (route-for-simulation :id 1 :vehicle v1 :depot d0
			    :clients (list c1 c2 d0) :previous-client d0))
	   (s (basic-solution :id 1 :routes (list r1)))
	   (out (new-output-node :output-value 0))
	   (graph (init-graph s))
	   (dist-mat #2A((0 1 2) (1 0 2) (2 2 0))))
      (progn
	(setf (gethash 'total-distance (slot-to-output graph)) out)
	(loop for r in (routes s) do
	  (progn
	    (loop for c in (clients r) do
	      (progn 
		(move-node-from-to (previous-client r) c 'total-distance dist-mat graph)
		(setf (previous-client r) c)))))
	(format t "EVALUATION (should be 5): ~a~%" (output-value out))
	(format t "~a~%" graph))))

#+END_SRC

#+RESULTS:
#+begin_example
EVALUATION (should be 5): 5
<EVAL-GRAPH: 
 output: NIL  
 inputs: 
  <Depot node, content: <d:0>, demand: NIL>
  <Cliient node <c:1>, 
     first-distance-calculator: <output: <Output node, value: 5>>, 
     second-distance-calculator: <output: <Output node, value: 5>>>
  <Cliient node <c:2>, 
     first-distance-calculator: <output: <Output node, value: 5>>, 
     second-distance-calculator: <output: <Output node, value: 5>>>
  <Depot node, content: <d:0>, demand: NIL>
  <Vehicle node, content: <v:1>, accumulator: NIL>
  <Input node, content: <r1: <v:1> (<d:0>: (<c:1> <c:2> <d:0>))>>
 
 client-buffer: #<HASH-TABLE :TEST EQL :COUNT 0 {1006478B13}> 

 solution-track: S1: (0)
routes:
  <r1: <v:1> (<d:0>: (<c:1> <c:2> <d:0>))>
>
#+end_example

** defallocable
**** documentation
A method to store partial or final values. Also creates accumulator
nodes in the tape.
**** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod defallocable (output-slot value-of-slot graph)
    (let* ((new-node (new-accumulator-node :output-value value-of-slot)))
        (progn
            (setf (gethash output-slot (slot-to-output graph)) new-node))))
#+END_SRC
** increment-with
*** documentation
Statement used to increment an allocable with another one.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
  (defmethod increment-with (output-slot partial-slot graph)
    (let* ((out-node (gethash output-slot (slot-to-output graph)))
	   (part-node (gethash partial-slot (slot-to-output graph)))
	   (updt (new-increment-accumulator-node 
		  :output-action out-node
		  :partial-accumulator part-node)))
      (progn
	(setf (updater part-node) updt)
	(evaluate-low-level-node updt))))
#+END_SRC

*** test
# #+BEGIN_SRC lisp +n -r :results output :exports both :tangle ../src/eval-graph-builder-test.lisp
# (let* ((depot (client 0))
#        (c1 (client 1))
#        (c2 (client 2))
#        (r (route 1 `(,c1 ,c2 ,depot) depot))
#        (sol (solution `(,r)))
#        (act (action-distance 0))
#        (graph (init-graph sol))
#        (mat #2A((0 1 2) (1 0 2) (2 2 0))))
#     (progn
#         (defallocable 'total-distance 0 graph)
#         (loop for r in (routes sol) do
#             (progn
#                 (defallocable 'route-distance 0 graph)
#                 (loop for c in (clients r) do
#                    (progn 
#                        (move-node-from-to (prev-client r) c 'route-distance graph mat)
#                        (setf (prev-client r) c)))
#                 (increment-with 'total-distance 'route-distance graph)))
#         (format t "EVALUATION (should be 5): ~a~%" (output-value 
#                                                         (gethash 'total-distance (slot-to-output graph))))))
# #+END_SRC

#+RESULTS:
: EVALUATION (should be 5): 5
** set-output
*** documentation
To mark a certain variable defined during evaluation as the output.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod set-output (output-slot graph)
    (setf (output graph) (gethash output-slot (slot-to-output graph))))
#+END_SRC
** deliver
*** documentation
Delivers pruduct to a demand client
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
  (defmethod deliver (c capacity-slot-accumulator graph)
    ;;(if (not (typep c 'basic-depot))
	(let* ((c-node (gethash c (class-to-io graph)))
	       (acc (gethash capacity-slot-accumulator (slot-to-output graph)))
	       (c-calc (new-decrement-capacity-node :output-action acc :input-with-demand c-node)))
	  (progn
	  
	    (setf (demand-calculator c-node) c-calc)
	    (evaluate-low-level-node c-calc))))

#+END_SRC
** penalize
*** documentation
It's used to apply a penalization
on a certain field
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod penalize (input-slot-accum output-slot-accum p-factor graph)
    (let* ((i-node (gethash input-slot-accum (slot-to-output graph)))
           (o-node (gethash output-slot-accum (slot-to-output graph)))
           (penalizer (new-penalize-accumulator-node :output-action o-node :partial-accumulator i-node :factor p-factor)))
        (progn
            (setf (updater i-node) penalizer)
            (evaluate-low-level-node penalizer))))
#+END_SRC
** remove-client-from
*** documentation
A wrapper that allow the user remove a client using its coordinates in the solution.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod remove-client-from (route-index client-index buffer-index graph)
    (let* ((target-route (car (nthcdr route-index (append '(()) (routes (solution-track graph))))))
           (target-client (car (nthcdr client-index (append '(()) (clients target-route)))))
           (node-to-remove (gethash target-client (class-to-io graph)))) 
        (progn
            (setf (clients target-route) (remove target-client (clients target-route)))
            (setf (gethash buffer-index (client-buffer graph)) target-client)
            (remove-node node-to-remove))))
#+END_SRC
** insert-client-to
*** documentation
A wrapper that allow the user insert a client using its coordinates in the solution.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
  (defmethod insert-client-to (route-index client-index buffer-index graph)
    (let* ((target-route (car (nthcdr route-index (append '(()) (routes (solution-track graph))))))
	   (target-client (gethash buffer-index (client-buffer graph)))
	   (node-to-insert (gethash target-client (class-to-io graph)))
	   (client-before-insert-to (car (nthcdr client-index (append '(()) (clients target-route)))))
	   (node-before-insert-to (gethash client-before-insert-to (class-to-io graph))))


      ;;      (format t "~a ~%" node-before-insert-to)
      ;;      (format t "~a ~%~%" node-to-insert)

      (remhash buffer-index (client-buffer graph))
      (if (eq client-index 1)
	  ;; if branch
	  (push target-client (clients target-route))
	  ;; else branch
	  (push target-client (cdr (nthcdr (- client-index 1) (append '(()) (clients target-route))))))

      (insert-node node-before-insert-to node-to-insert)))
#+END_SRC
** get-value
*** documentation
A shortcut to get the value of any declared variable 

*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod get-value (var-symbol graph)
    (output-value (gethash var-symbol (slot-to-output graph))))
#+END_SRC
** get-output
*** documentation
A shortcut to get the value of the output node
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod get-output (graph)
    (output-value (output graph)))
#+END_SRC
** set-route-vehicle
*** documentation
Allows the user to assign a specific vehicle to the route.
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod set-route-vehicle (route-instance route-accumulator graph)
    (let* ((v-input (gethash (vehicle route-instance) (class-to-io graph)))
           (init-val (capacity (vehicle route-instance)))
           (new-node (new-accumulator-node :output-value init-val)))
        (progn
            (setf (gethash route-accumulator (slot-to-output graph)) new-node)
            (setf (dependent-accumulator v-input) new-node))))
#+END_SRC
** remove-vehicle-from
*** documentation
A wrapper that allow the user remove a vehicle using
its coordinates in the solution
*** code
#+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
(defmethod remove-vehicle-from (route-index graph)
    (let* ((target-vehicle (vehicle (car (nthcdr route-index (routes (solution-track graph))))))
           (target-input (gethash target-vehicle (class-to-io graph))))
        (progn
            (remove-node target-input)
            (setf (vehicle-buffer graph) (append (vehicle-buffer graph) target-input)))))
#+END_SRC
** TODO insert-vehicle-to
*** documentation
A wrapper that allow the user insert a client using
its coordinates in the solution
*** code
# #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
#   (defmethod insert-vehicle-to (route-index vehicle-index graph)
#     (let* ((target-route (car (nthcdr route-index (routes (solution-track graph)))))
# 	   (target-vehicle (car (nthcdr vehicle-index (vehicle-buffer graph))))
# 	   (node-to-insert (gethash target-vehicle (class-to-io *tape*)))
# 	   (vehicle-before-insert-to (car (nthcdr route-index (clients target-route))))
# 	   (node-before-insert-to (gethash vehicle-before-insert-to (class-to-io *tape*))))
#       (progn
# 	(setf (client-buffer graph) (remove target-vehicle (client-buffer graph)))
# 	(insert-node node-before-insert-to node-to-insert))))
#+END_SRC
** TODO change-first-depot
*** documentation
# Changes the initial depot of the a route with another depot. Receives the index of the route and the index of the depot to insert.
 *** code
# #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
# (defmethod change-first-depot (route-index d-index graph)
#     (let* ((target-route (car (nthcdr route-index (routes (solution-track graph)))))
#            (reference-client (car (clients target-route)))
#            (io-reference (gethash reference-client (class-to-io graph)))
#            (depot-to-extract (first-depot target-route))
#            (io-to-extract (gethash depot-to-extract (class-to-io graph)))
#            (depot-to-insert-orig (car (nthcdr d-index (depots (solution-track graph)))))
#            (depot-to-insert (basic-depot (id depot-to-insert-orig))) ; clone the depot orig
#            (io-to-insert (input-depot-node nil nil nil nil))) 
#         (progn
#            (setf (prev-slot target-route) depot-to-extract)
#            (setf (second-distance-calculator io-to-insert) t)
#            (setf (gethash depot-to-insert (class-to-io graph)) io-to-insert)
#            (setf (content io-to-insert) depot-to-insert)
#            (setf (first-depot target-route) depot-to-insert) ;;TODO here
#            (append (remove-node io-to-extract)
#                    (insert-node io-reference io-to-insert)))))
        
# #+END_SRC
** TODO undo-first-depot-change
*** documentation
To revert the last depot change done
*** code
# #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
# (defmethod undo-first-depot-change (route-index graph)
#     (let* ((target-route (car (nthcdr route-index (routes (solution-track graph)))))
#            (reference-client (car (clients target-route)))
#            (io-reference (gethash reference-client (class-to-io graph)))
#            (depot-to-extract (first-depot target-route))
#            (io-to-extract (gethash depot-to-extract (class-to-io graph)))
#            (depot-to-insert-orig (prev-slot target-route))
#            (depot-to-insert (depot (id depot-to-insert-orig) 0)) ; clone the depot orig
#            (io-to-insert (input-depot-node nil nil nil nil))) ; fix when refactoring is done 
#         (progn
#            (setf (prev-slot target-route) depot-to-extract)
#            (setf (second-distance-calculator io-to-insert) t)
#            (setf (gethash depot-to-insert (class-to-io graph)) io-to-insert)
#            (setf (content io-to-insert) depot-to-insert)
#            (setf (first-depot target-route) depot-to-insert)
#            (append (remove-node io-to-extract)
#                    (insert-node io-reference io-to-insert)))))
        
# #+END_SRC
** TODO change-last-depot
*** documentation
Changes the last depot of the a route with another depot.
Receives the index of the route and the index of the depot
to insert.
*** code
# #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
# (defmethod change-last-depot (route-index d-index graph)
#     (let* ((target-route (car (nthcdr route-index (routes (solution-track graph)))))
#            (reference-client (car (last (clients target-route) 2)))
#            (io-reference (gethash reference-client (class-to-io graph)))
#            (depot-to-extract (car (last (clients target-route))))
#            (io-to-extract (gethash depot-to-extract (class-to-io graph)))
#            (depot-to-insert-orig (car (nthcdr d-index (depots (solution-track graph)))))
#            (depot-to-insert (depot (id depot-to-insert-orig) 0)) ; clone the depot orig
#            (io-to-insert (input-depot-node nil nil nil nil))) ; fix when refactoring is done 
#         (progn
#            (setf (prev-slot target-route) depot-to-extract)
#            (setf (first-distance-calculator io-to-insert) t)
#            (setf (gethash depot-to-insert (class-to-io graph)) io-to-insert)
#            (setf (content io-to-insert) depot-to-insert)
#            (setf (car (last (clients target-route))) depot-to-insert)
#            (append (remove-node io-to-extract)
#                    (insert-node io-reference io-to-insert)))))
# #+END_SRC
** TODO undo-last-depot-change
*** documentation
To revert the last change of the last depot
*** code
# #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/eval-graph-builder.lisp
# (defmethod undo-last-depot-change (route-index graph)
#     (let* ((target-route (car (nthcdr route-index (routes (solution-track graph)))))
#            (reference-client (car (last (clients target-route) 2)))
#            (io-reference (gethash reference-client (class-to-io graph)))
#            (depot-to-extract (car (last (clients target-route))))
#            (io-to-extract (gethash depot-to-extract (class-to-io graph)))
#            (depot-to-insert-orig (prev-slot target-route))
#            (depot-to-insert (depot (id depot-to-insert-orig) 0)) ; clone the depot orig
#            (io-to-insert (input-depot-node nil nil nil nil))) 
#         (progn
#            (setf (prev-slot target-route) depot-to-extract)
#            (setf (first-distance-calculator io-to-insert) t)
#            (setf (gethash depot-to-insert (class-to-io graph)) io-to-insert)
#            (setf (content io-to-insert) depot-to-insert)
#            (setf (car (last (clients target-route))) depot-to-insert)
#            (append (remove-node io-to-extract)
#                    (insert-node io-reference io-to-insert)))))
# #+END_SRC


RIGHT NOW ROUTES CAN ONLY START AND END IN THE SAME DEPOT. A FUTURE AND SIMPLE REFACTORING WILL BE DONE TO FIX THAT




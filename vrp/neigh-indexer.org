#+TITLE: Neighborhood indexing over the neighborhood-tree
#+AUTHOR: Hector F. Masson
#+EMAIL: h.masson1911@gmail.com



* Description
  In this file, I'm going to introduce the code for indexing in the neighborhhod
  produced by applying the neighbothood criterion to the given solution of the VRP.
  The src blocks will be tangled to ../src/neigh-indexer.lisp.

  
* Add the package to the tangled file
  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
    (in-package :vrp)
  #+END_SRC


* Classical Indexer
  In this section I'll define a few methods to produce a classical index
  order over a given neighborhood of the VRP. A classical index meas, that
  solutions are ordered by a low or equal function on their components.
  

** From index to coordinate list
   In this section, we'll define a method for each tree node. These methods add the coordinates for their corresponding operations in the coordinate list.

*** Root-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree root-node)
			       index)
	(if (or (null (child tree)) (> index (total tree)) (< index 1))
	    (error "In root-node nth-neighbor index is incorrect.")
	    (nth-neighbor (child tree)
			  index)))
    #+END_SRC

*** R-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree r-node)
			       index)
	(let* ((acc 0)
	       (pos 0)
	       (child nil))
	  (loop for (current-child . current-route) in (children tree) do
	       (progn
		 (when (<= index acc)
		   (return))
		 (setf child current-child)
		 (setf acc (+ acc (total current-child)))
		 (setf pos current-route)))
	  (if (> index acc)
	      (error "In r-node nth-neighbor index is incorrect.")
	      (progn
		(setf acc (- acc (total child)))
		(cons  (list 'r pos)
		       (nth-neighbor child (- index acc)))))))
    #+END_SRC

*** A-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree a-node)
			       index)
	(let* ((pos (1+ (truncate (/ index (total (child tree)))))))
	  (if (= index (* (total (child tree)) (1- pos)))
	      (decf pos))
	  (if (> pos (possibilities tree))
	      (error "In a-node nth-neighbor index is incorrect.")
	      (cons (list 'a (route-number tree) pos (node-id tree))
		    (nth-neighbor (child tree)
				  (- index (* (1- pos) (total (child tree)))))))))
    #+END_SRC

*** B-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree b-node)
			       index)
	(let* ((pos (1+ (truncate (/ index (total (child tree)))))))

	  (if (= index (* (total (child tree)) (1- pos)))
	      (decf pos))
	  (if (> pos (possibilities tree))
	      (error "In b-node nth-neighbor index is incorrect.")
	      (cons (list 'b (route-number tree) pos (node-id tree))
		    (nth-neighbor (child tree)
				  (- index (* (1- pos) (total (child tree)))))))))
    #+END_SRC   

*** C-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree c-node)
			       index)
	(if (> index (total tree))
	    (error "In c-node nth-neighbor index is incorrect.")
	    (cons (list 'c (select-op1-id tree) (select-op2-id tree))
		  (nth-neighbor (child tree) index))))
    #+END_SRC

*** E-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree e-node)
			       index)
	(let* ((acc 0)
	       (pos 0)
	       (subr-len 0)
	       (child nil))
	  (loop for (current-child (len . positions)) in (children tree) do
	       (progn
		 (when (<= index acc)
		   (return))
		 (setf child current-child
		       acc (+ acc (* positions (total current-child)))
		       subr-len len
		       pos positions)))
    
	  (if (> index acc)
	      (error "In e-node nth-neighbor index is incorrect.")
	      (progn
		(let* ((acc (- acc (* pos (total child))))
		       (index (- index acc))
		       (start-pos (1+ (truncate (/ index (total child))))))
		  (if (= index (* (total child) (1- start-pos)))
		      (decf start-pos)) 
		  (cons (list 'e (route-number tree) start-pos subr-len (node-id tree))
			(nth-neighbor child (- index (* (1- start-pos) (total child))))))))))
    #+END_SRC

*** F-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree f-node)
			       index)
	(let* ((pos (1+ (truncate (/ index (total (child tree)))))))    
	  (if (= index (* (total (child tree)) (1- pos)))
	      (decf pos))
	  (if (> pos (possibilities tree))
	      (error "In f-node nth-neighbor index is incorrect.")
	      (cons (list 'f (route-number tree) pos (select-op-id tree))
		    (nth-neighbor (child tree)
				  (- index (* (1- pos) (total (child tree)))))))))
    #+END_SRC   

*** G-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree g-node)
			       index)
	(if (> index (total tree))
	    (error "In g-node nth-neighbor index is incorrect.")
	    (cons (list 'g (select-op1-id tree) (select-op2-id tree))
		  (nth-neighbor (child tree) index))))
    #+END_SRC

*** H-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree h-node)
			       index)
	(if (> index (total tree))
	    (error "In h-node nth-neighbor index is incorrect.")
	    (cons (list 'h (select-op-id tree))
		  (nth-neighbor (child tree) index))))
    #+END_SRC

*** Nil-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-neighbor ((tree nil-node)
			       index)
	(if (= index 1)
	    nil
	    (error "In nil-node nth-neighbor index is incorrect.")))
    #+END_SRC

** From coordinate list to index
   In this section, we compute the index for a given coordinate list.


*** Root-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree root-node)
			       ops default)
	(if (null (child tree))
	    (error "In root-node ops-neighbor ops list is incorrect.")
	    (ops-neighbor (child tree) ops 0)))
    #+END_SRC

*** R-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree r-node)
			       ops default)
	(let* ((acc 0)
	       (pos 0)
	       (child nil)
	       (op-route (second (car ops))))
	  (loop for (current-child . current-route) in (children tree) do
	       (progn
		 (setf pos current-route
		       child current-child)
		 (when (= op-route current-route)
		   (return))
		 (setf acc (+ acc (total current-child)))))
	  (if (= op-route pos)
	      (+ acc
		 (ops-neighbor child (cdr ops) 0))
	      (error "In r-node ops-neighbor ops list is incorrect."))))
    #+END_SRC

*** A-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree a-node)
			       ops default)
	(let ((op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In a-node ops-neighbor ops list is incorrect.")
	      (+ (* (1- op-position) (total (child tree))) 
		 (ops-neighbor (child tree) (cdr ops) 1)))))
    #+END_SRC

*** B-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree b-node)
			       ops default)
	(let ((op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In b-node ops-neighbor ops list is incorrect.")
	      (+ (* (1- op-position) (total (child tree))) 
		 (ops-neighbor (child tree) (cdr ops) 1)))))
    #+END_SRC   

*** C-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree c-node)
			       ops default)
	(ops-neighbor (child tree) (rest ops) 1))
    #+END_SRC

*** E-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree e-node)
			       ops default)
	(let* ((acc 0)
	       (pos 0)
	       (subr-len 0)
	       (child nil)
	       (start-pos (third (car ops)))
	       (k-length (fourth (car ops))))
	  (loop for (current-child (len . positions)) in (children tree) do
	       (progn
		 (setf child current-child
		       subr-len len
		       pos positions)
		 (when (= k-length len)
		   (return))
		 (setf acc (+ acc (* positions (total current-child))))))
	  (if (and (= k-length subr-len) (<= start-pos pos))
	      (+ acc
		 (* (1- start-pos) (total child))
		 (ops-neighbor child (cdr ops) 0))
	      (error "In e-node ops-neighbor ops list is incorrect."))))
    #+END_SRC

*** F-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree f-node)
			       ops default)
	(let ((op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In f-node ops-neighbor ops list is incorrect.")
	      (+ (* (1- op-position) (total (child tree))) 
		 (ops-neighbor (child tree) (cdr ops) 1)))))
    #+END_SRC   

*** G-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree g-node)
			       ops default)
	(ops-neighbor (child tree) (rest ops) 1))
    #+END_SRC

*** H-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree h-node)
			       ops default)
	(ops-neighbor (child tree) (rest ops) 1))
    #+END_SRC

*** Nil-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-neighbor ((tree nil-node)
			       ops default)
	  (if (null ops)
	      default
	      (error "In nil-node ops-neighbor ops list is incorrect.")))
    #+END_SRC
u
** Indexing in the neighborhood
   In this section I'll define two functions to index in the neighborhood using
   the classic indexer.

  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
    (defun index-to-coords-classic-indexer (neighborhood index)
      (nth-neighbor (tree neighborhood) index))

    (defun coords-to-index-classic-indexer (neighborhood coords)
      (ops-neighbor (tree neighborhood) coords 0))
  #+END_SRC

** Test function
   In this section I'll define a function that test if the indexers previously
   defined are indeed inverse functions.

  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
    (defun nth-ops-classic-indexer-test (neighborhood)
      (let* ((N (cardinality neighborhood)))
	(loop for i from 1 to N
	   ;; do
	   ;;	 (if (= i (coords-to-index-classic-indexer neighborhood
	   ;;					   (index-to-coords-classic-indexer neighborhood i)))
	     ;;(format t "Nth: ~A is ok.~%" i)
	     ;;(format t "Nth: ~A is wrong.~%" i)))))
	   sum (abs (- i (coords-to-index-classic-indexer neighborhood
							  (index-to-coords-classic-indexer neighborhood i)))))))
  #+END_SRC


* Custom Indexer
  The way in which the neighborhood is indexed determines some important properties
  of the solutions order, such as continuous ranges of solutions in a region. To 
  fit this property a customize indexing strategy is defined.

** Branch indexer
   In this section I'll define a few methods to index over a branch
   in the neighborhood tree. The idea is that a branch represents a
   set of solutions, and this methods produce an order for those
   solutions.

*** From index to coordinate list
    In this section we'll define a method for each tree node, to create the 
    coordinate list that corresponds to an index in a fixed branch.

**** Root-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree root-node)
				      index
				      branch-info branch-poss)
	(let ((total (first branch-poss)))
	  (if (or (null (child tree)) (> index total) (< index 1))
	      (error "In root-node nth-branch-neighbor some error occurred.")
	      (nth-branch-neighbor (child tree) index branch-info (rest branch-poss)))))
    #+END_SRC

**** R-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree r-node)
				      index
				      branch-info branch-poss)
	(let* ((pos (1- (cdr (first branch-info))))
	       (child (car (nth pos (children tree))))
	       (route (cdr (nth pos (children tree)))))

	  (cons (list 'r route)
		(nth-branch-neighbor child index
				     (rest branch-info) branch-poss))))
    #+END_SRC

**** A-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree a-node)
				      index
				      branch-info branch-poss)

	(let* ((sol-for-poss (first branch-poss))
	       (pos (1+ (truncate (/ index sol-for-poss)))))
	  (when (= index (* sol-for-poss (1- pos)))
	    (decf pos))
	  (cons (list 'a (route-number tree) pos (node-id tree))
		    (nth-branch-neighbor (child tree)
					 (- index (* (1- pos) sol-for-poss))
					 branch-info
					 (rest branch-poss)))))
    #+END_SRC

**** B-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree b-node)
				     index
				     branch-info branch-poss)

	(let* ((sol-for-poss (first branch-poss))
	       (pos (1+ (truncate (/ index sol-for-poss)))))
	  (when (= index (* sol-for-poss (1- pos)))
	    (decf pos))
	  (cons (list 'b (route-number tree) pos (node-id tree))
		(nth-branch-neighbor (child tree)
				     (- index (* (1- pos) sol-for-poss))
				     branch-info
				     (rest branch-poss)))))
    #+END_SRC   

**** C-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree c-node)
				      index
				      branch-info branch-poss)
	(cons (list 'c (select-op1-id tree) (select-op2-id tree))
	      (nth-branch-neighbor (child tree) index
				   branch-info branch-poss)))
    #+END_SRC

**** E-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree e-node)
				      index
				      branch-info branch-poss)

	(let* ((pos (1- (cdr (first branch-info))))
	       (sol-for-poss (first branch-poss))
	       (child (car (nth pos (children tree))))
	       (subr-len (car (car (cdr (nth pos (children tree))))))
	       (start-pos (1+ (truncate (/ index sol-for-poss)))))

	  (when (= index (* sol-for-poss (1- start-pos)))
	    (decf start-pos))

	  (cons (list 'e (route-number tree) start-pos subr-len (node-id tree))
		(nth-branch-neighbor child (- index (* (1- start-pos) sol-for-poss))
				     (rest branch-info) (rest branch-poss)))))
    #+END_SRC

**** F-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree f-node)
				      index
				      branch-info branch-poss)
	(let* ((sol-for-poss (first branch-poss))
	       (pos (1+ (truncate (/ index sol-for-poss)))))

	  (when (= index (* sol-for-poss (1- pos)))
	    (decf pos))
    
	  (cons (list 'f (route-number tree) pos (select-op-id tree))
		(nth-branch-neighbor (child tree)
				     (- index (* (1- pos) sol-for-poss))
				     branch-poss (rest branch-poss)))))
    #+END_SRC   

**** G-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree g-node)
				      index
				      branch-info branch-poss)
	(cons (list 'g (select-op1-id tree) (select-op2-id tree))
	      (nth-branch-neighbor (child tree) index
				   branch-info branch-poss)))
    #+END_SRC

**** H-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree h-node)
				      index
				      branch-info branch-poss)
	(cons (list 'h (select-op-id tree))
	      (nth-branch-neighbor (child tree) index
				   branch-info branch-poss)))
    #+END_SRC

**** Nil-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod nth-branch-neighbor ((tree nil-node)
				      index
				      branch-info branch-poss)
	(if (= index 1)
	    nil
	    (error "In nil-node nth-neighbor index is incorrect.")))
    #+END_SRC

*** From coordinate list to index
    In this section, we'll define a method for each tree node to copmute the index
    in a fixed branch for a coordinate list that belongs to this branch.

**** Root-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree root-node)
				      ops
				      branch-info branch-poss
				      default)
	(if (null (child tree))
	    (error "In root-node ops-branch-neighbor some error occurred.")
	    (ops-branch-neighbor (child tree) ops branch-info (rest branch-poss) 0)))
    #+END_SRC

**** R-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree r-node)
				      ops
				      branch-info branch-poss
				      default)
	(let* ((op-route (second (car ops)))
	       (pos (1- (cdr (first branch-info))))
	       (child (car (nth pos (children tree))))
	       (route (cdr (nth pos (children tree)))))
	  (if (= op-route route)
	      (ops-branch-neighbor child (cdr ops) (rest branch-info)
				   branch-poss 0)
	      (error "In r-node ops-branch-neighbor some error occurred."))))
    #+END_SRC

**** A-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree a-node)
				      ops
				      branch-info branch-poss
				      default)

	(let ((sol-for-poss (first branch-poss))
	      (op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In a-node nth-branch-neighbor some error occurred.")
	      (+ (* (1- op-position) sol-for-poss)
		 (ops-branch-neighbor (child tree) (cdr ops) branch-info (rest branch-poss) 1)))))
    #+END_SRC

**** B-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree b-node)
				      ops
				      branch-info branch-poss
				      default)
	(let ((sol-for-poss (first branch-poss))
	      (op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In b-node ops-branch-neighbor some error occurred.")
	      (+ (* (1- op-position) sol-for-poss)
		 (ops-branch-neighbor (child tree) (cdr ops) branch-info (rest branch-poss) 1)))))
    #+END_SRC   

**** C-node
    
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree c-node)
				      ops
				      branch-info branch-poss
				      default)
	(ops-branch-neighbor (child tree) (rest ops) branch-info branch-poss 1))
    #+END_SRC

**** E-node
 
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree e-node)
				      ops
				      branch-info branch-poss
				      default)
	(let* ((pos (1- (cdr (first branch-info))))
	       (sol-for-poss (first branch-poss))
	       (child (car (nth pos (children tree))))
	       (subr-len (car (car (cdr (nth pos (children tree))))))
	       (possib (cdr (car (cdr (nth pos (children tree))))))

	       (start-pos (third (car ops)))
	       (k-length (fourth (car ops))))
	  (if (and (= k-length subr-len) (<= start-pos possib))
	      (+ (* (1- start-pos) sol-for-poss)
		 (ops-branch-neighbor child (cdr ops) (rest branch-info) (rest branch-poss) 0))
	      (error "In e-node some error occurred."))))
    #+END_SRC

**** F-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree f-node)
				      ops
				      branch-info branch-poss
				      default)
	(let ((sol-for-poss (first branch-poss))
	      (op-position (third (car ops))))
	  (if (> op-position (possibilities tree))
	      (error "In f-node ops-branch-neighbor some error occurred.")
	      (+ (* (1- op-position) sol-for-poss)
		 (ops-branch-neighbor (child tree) (cdr ops) branch-info (rest branch-poss) 1)))))
    #+END_SRC   

**** G-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree g-node)
				      ops
				      branch-info branch-poss
				      default)
	(ops-branch-neighbor (child tree) (rest ops) branch-info branch-poss 1))
    #+END_SRC

**** H-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree h-node)
				      ops
				      branch-info branch-poss
				      default)
	(ops-branch-neighbor (child tree) (rest ops) branch-info branch-poss 1))
    #+END_SRC
    
**** Nil-node

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
      (defmethod ops-branch-neighbor ((tree nil-node)
				      ops
				      branch-info branch-poss
				      default)
	(if (null ops)
	    default
	    (error "In nil-node ops-neighbor ops list is incorrect.")))
    #+END_SRC

*** Test function
   In this section I'll define a function that test if the indexers previously
   defined are indeed inverse functions.   

  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
    (defun nth-ops-branch-neighbor-test (neighborhood)
      (loop for region in (region-list neighborhood)
	 doing
	   (format t "Region: ~A~%" (number-id region))
	   (loop for b-reg in (basic-region-list region)
	      doing
		(let ((N (cardinality b-reg))
		      (tree-neigh (tree neighborhood))
		      (information (info b-reg))
		      (sub-sols (subtree-sols b-reg)))
		  (format t "~A~%" (loop for i from 1 to N
				      sum (abs (- i (ops-branch-neighbor tree-neigh
									 (nth-branch-neighbor tree-neigh
											      i
											      information
											      sub-sols)
									 information
									 sub-sols
									 0)))))
		  ))))
  #+END_SRC

** Build factor-level d-tuple from coordinate list
   In this section I'll define a function that transforms a coordinate list into a d-tuple. Each element of this tuple represents a level of a factor, the factor is an operation that determines a region and a level is the particular value that this operation takes in the given coordinate list.

   Note: here is where the regions definition occurs.

*** Methods
    This function takes a coordinate as its argument, and decide if this coordinate
    is important to compute a factor-tuple and what information to gather.

**** 'R-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'r))
					   coordinate)
	;; ('r route-number)
	(list (cons 'r (first coordinate))))
    #+END_SRC

**** 'A-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'a))
					   coordinate)
	;; ('a route-number client-position id-operation)
	nil)
    #+END_SRC

**** 'B-cooordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'b))
					   coordinate)
	;; ('b route-number insertion-position id-select-client-operation)
	nil)
    #+END_SRC

**** 'C-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'c))
					   coordinate)
	;; ('c id-select-client1-operation id-select-client2-operation)
	nil)
    #+END_SRC

**** 'E-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'e))
					   coordinate)
	;; ('e route-number start-position length id-operation)
	(list (cons 'e (third coordinate))))
    #+END_SRC

**** 'F-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'f))
					   coordinate)
	;; ('f route-number insertion-position id-select-subroute-operation)
	nil)
    #+END_SRC

**** 'G-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'g))
					       coordinate)
	;; ('g id-select-subroute1-operation id-select-subroute2-operation)
	nil)
    #+END_SRC

**** 'H-coordinate

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-to-level ((symbol (eql 'h))
					   coordinate)
	;; ('h id-select-subroute-operation)
	nil)
    #+END_SRC

*** Wrapper
    This function iterates over the coordiante list and collects for a given coordinate, the level of the current factor.

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defmethod from-coordinate-list-to-branch-info (coordinate-list)
	(let (branch-info)
	  ;; collect the info
	  (loop for coord in coordinate-list
	     doing
	       (setf branch-info (append branch-info
					 (from-coordinate-to-level (first coord)
								   (rest coord)))))
	  ;; return the corresponding branch-info for the current coord-list
	  branch-info))
    #+END_SRC

*** Some functions to compute the tuples

    The next functions transforms a list with the branch information and computes a branch tuple and region tuple.


     #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
       (defmethod from-branch-info-to-branch-tuple (branch-info)
	 (loop for (sym . num) in branch-info
	    collecting
	      num))

       (defmethod from-branch-info-to-region-tuple (branch-info)
	 (loop for (sym . num) in branch-info
	    collecting
	      (if (eql sym 'e)
		  (binary-search num *subroute-length-upper-bounds*)
		  num)))
     #+END_SRC

     The next functions make use of the previously defined ones to compute the branch tuple and region tuple for a given coordinate list.

     #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
       (defmethod from-coordinate-list-to-branch-tuple (branch-info)
	 (from-branch-info-to-branch-tuple
	  (from-coordinate-list-to-branch-info
	   branch-info)))

       (defmethod from-coordinate-list-to-region-tuple (branch-info)
	 (from-branch-info-to-region-tuple
	  (from-coordinate-list-to-branch-info
	   branch-info)))
     #+END_SRC

** Indexing in the neighborhood
   In this section I'll define two functions to index in the neighborhood using
   the classic indexer.

  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
    (defun index-to-coords-customize-indexer (neighborhood index)
      (let ((region (nth (binary-search index (region-indexes neighborhood))
			 (region-list neighborhood))))
	(let ((basic-region (nth (binary-search index (basic-indexes region))
				 (basic-region-list region))))
	  (nth-branch-neighbor (tree neighborhood)
			       (1+ (- index (first-index basic-region)))
			       (info basic-region)
			       (subtree-sols basic-region)))))

  
    (defun coords-to-index-customize-indexer (neighborhood coords)
      (let ((region (nth
		     (binary-search (from-coordinate-list-to-region-tuple coords)
				    (region-keys neighborhood)
				    :fn #'comp-less-lsts)
		     (region-list neighborhood))))
	(let ((basic-region (nth
			     (binary-search (from-coordinate-list-to-branch-tuple coords)
					    (basic-keys region)
					    :fn #'comp-less-lsts)
			     (basic-region-list region))))
	  (+ (1-(first-index basic-region))
	     (ops-branch-neighbor (tree neighborhood)
				  coords
				  (info basic-region)
				  (subtree-sols basic-region)
				  0)))))
  #+END_SRC

** Test function
   In this section I'll define a function that test if the indexers previously
   defined are indeed inverse functions.   

  #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp
    (defun nth-ops-customize-indexer-test (neighborhood)
      (let* ((N (cardinality neighborhood)))
	(loop for i from 1 to N
	   ;; do
	   ;;	 (if (= i (coords-to-index-customize-indexer neighborhood
	   ;;					   (index-to-coords-customize-indexer neighborhood i)))
	     ;;(format t "Nth: ~A is ok.~%" i)
	     ;;(format t "Nth: ~A is wrong.~%" i)))))
	   sum (abs (- i (coords-to-index-customize-indexer neighborhood
							  (index-to-coords-customize-indexer neighborhood i)))))))
  #+END_SRC




* Indexing in the neighborhood
   In this section I'll introduce some functions to make possible indexing in the
   neighborhood with both indexer functions in a general fashion.

   Note: The indexes and coordinate lists are assumed to be valid.

*** From index to coordinate list
    The next function computes the coordinate list of the neighbor solution at a
    given index between 1 and the neighborhood cardinality.
   
    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defun from-index-to-coord-list (neighborhood index)
	(funcall *from-index-to-coords-indexer-function* neighborhood index))
    #+END_SRC

*** From coordinate list to index
    The next function computes the index of the neighbor solution represented by
    a coordinate list.

    #+BEGIN_SRC lisp +n -r :results none :exports code :tangle ../src/neigh-indexer.lisp 
      (defun from-coord-list-to-index (neighborhood coords)
	(funcall *from-coords-to-indexer-indexer-function* neighborhood coords))
    #+END_SRC

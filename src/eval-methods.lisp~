(in-package :vrp)

(defgeneric remove-node (t-node)
    (:method-combination append))

(defmethod remove-node append ((t-node input-node))
    ())

(defmethod remove-node append ((t-node input-distance-node))
 
  (if (not (typep t-node 'input-depot-node)) 
   (progn
      (undo-low-level-node (first-distance-calculator t-node))
      (undo-low-level-node (second-distance-calculator t-node))
      
      (let ((new-inc (new-increment-distance-node
                                   nil
                                   nil
                                   (output-action (first-distance-calculator t-node))
                                   (from-client (first-distance-calculator t-node))
                                   (to-client (second-distance-calculator t-node))
                                   (distance-matrix (first-distance-calculator t-node)))))
           (progn
               (setf (second-distance-calculator (from-client new-inc))
                     new-inc)
               (setf (first-distance-calculator (to-client new-inc))
                     new-inc)
               `((,#'evaluate-low-level-node ,new-inc)))))))

(defmethod remove-node append ((t-node input-demand-node))
   (if (not (typep t-node 'input-depot-node))
     (progn
      (undo-low-level-node (demand-calculator t-node))
      `((,#'undo-low-level-node ,(updater (output-action (demand-calculator t-node))))))))

(defmethod remove-node append ((t-node input-depot-node))
      (if (second-distance-calculator t-node)
        `((,#'undo-low-level-node ,(increment-distance-node
                                     (previous-node (second-distance-calculator t-node))
                                     (next-node (second-distance-calculator t-node))
                                     (output-action (second-distance-calculator t-node))
                                     (from-client (second-distance-calculator t-node))
                                     (to-client (second-distance-calculator t-node))
                                     (distance-matrix (second-distance-calculator t-node)))))
        `((,#'undo-low-level-node ,(increment-distance-node
                                     (previous-node (first-distance-calculator t-node))
                                     (next-node (first-distance-calculator t-node))
                                     (output-action (first-distance-calculator t-node))
                                     (from-client (first-distance-calculator t-node))
                                     (to-client (first-distance-calculator t-node))
                                     (distance-matrix (first-distance-calculator t-node)))))))

(defgeneric insert-node (t-node i-node)
    (:method-combination append))

(defmethod insert-node append ((t-node input-node) (i-node input-node))
    ())

(defmethod insert-node append ((t-node input-distance-node) 
                                      (i-node input-distance-node))
   (if (not (typep i-node 'input-depot-node))  
     (let* ((target-calc (first-distance-calculator t-node))
            (next-client t-node)
            (new-calc (increment-distance-node nil
                                                    nil
                                                    (output-action target-calc)
                                                    i-node
                                                    next-client
                                                    (distance-matrix target-calc))))
           (progn
               (undo-low-level-node target-calc)
               (setf (to-client target-calc) i-node)
               (setf (first-distance-calculator i-node) target-calc)
               (setf (second-distance-calculator i-node) new-calc)
               (setf (first-distance-calculator t-node) new-calc)
               `((,#'evaluate-low-level-node ,target-calc)
                 (,#'evaluate-low-level-node ,new-calc))))))

(defmethod insert-node append ((t-node input-demand-node) 
                                      (i-node input-demand-node))
   (let* ((new-inc (decrement-capacity-node nil 
                                                 nil
                                                 (output-action (demand-calculator t-node))
                                                 i-node)))
       (progn
          (setf (demand-calculator i-node) new-inc)
          `((,#'evaluate-low-level-node ,new-inc)))))

(defmethod insert-node append ((t-node input-distance-node) 
                                      (i-node input-depot-node))
   (let* ((is-origin (if (second-distance-calculator i-node) t nil))
          (calc (if is-origin 
                    (first-distance-calculator t-node)
                    (second-distance-calculator t-node))))
       (progn
          (if is-origin
              (progn 
                  (setf (second-distance-calculator i-node) calc)
                  (setf (from-client calc) i-node))
              (progn
                  (setf (first-distance-calculator i-node) calc)
                  (setf (to-client calc) i-node)))
          `((,#'evaluate-low-level-node ,calc)))))

(defgeneric evaluate-low-level-node (ll-node)
   (:documentation "The generic action to do in the low level graph node"))

(defmethod evaluate-low-level-node ((ll-node low-level-node))
   ())

(defmethod evaluate-low-level-node ((ll-node increment-distance-node))
   (progn
       (incf (output-value (output-action ll-node))
         (aref (distance-matrix ll-node) 
               (id (content (from-client ll-node))) 
               (id (content (to-client ll-node)))))
       (if (updater (output-action ll-node))
           `(,#'undo-low-level-node ,(updater (output-action ll-node)))
            nil)))

(defmethod evaluate-low-level-node ((ll-node decrement-capacity-node))
   (progn
         (decf (output-value (output-action ll-node)) 
               (demand (content (input-with-demand ll-node))))
         (if (updater (output-action ll-node))
          `(,#'undo-low-level-node ,(updater (output-action ll-node))))))

(defmethod evaluate-low-level-node ((ll-node increment-accumulator-node))
   (progn
       (setf (output-copy (partial-accumulator ll-node))
             (output-value (partial-accumulator ll-node)))
       (incf (output-value (output-action ll-node)) 
             (output-value (partial-accumulator ll-node)))
       nil))

(defmethod evaluate-low-level-node :after ((ll-node penalize-accumulator-node))
   (let ((penal-amount (* (max (- (output-value (partial-accumulator ll-node))) 0) (factor ll-node))))
        (progn 
             (setf (output-copy (partial-accumulator ll-node))
                   (min 0 (output-value (partial-accumulator ll-node))))
             (incf (output-value (output-action ll-node))
                    penal-amount)
             nil)))

(defgeneric undo-low-level-node (ll-node)
   (:documentation "The generic action to undo the low level graph node evaluation"))

(defmethod undo-low-level-node ((ll-node low-level-node))
   ())

(defmethod undo-low-level-node ((ll-node increment-distance-node))
   (progn
       (decf (output-value (output-action ll-node)) 
         (aref (distance-matrix ll-node) 
               (id (content (from-client ll-node))) 
               (id (content (to-client ll-node)))))
       (if (updater (output-action ll-node))
           `((,#'undo-low-level-node ,(updater (output-action ll-node)))))))

(defmethod undo-low-level-node ((ll-node decrement-capacity-node))
   (progn
         (incf (output-value (output-action ll-node)) 
               (demand (content (input-with-demand ll-node))))
         nil))

(defmethod undo-low-level-node :after ((ll-node increment-accumulator-node))
    (progn 
        (incf (output-value (output-action ll-node))
              (- (output-value (partial-accumulator ll-node))
                 (output-copy (partial-accumulator ll-node))))
        (setf (output-copy (partial-accumulator ll-node)) 
              (output-value (partial-accumulator ll-node)))
        (if (updater (output-action ll-node))
            (undo-low-level-node (updater (output-action ll-node))))))

(defmethod undo-low-level-node :after ((ll-node penalize-accumulator-node))
    (let ((former-p (* (- (output-copy (partial-accumulator ll-node)))
                       (factor ll-node)))
          (current-p (* (max 0 (- (output-value (partial-accumulator ll-node))))
                        (factor ll-node))))
        (progn
            (decf (output-value (output-action ll-node))
                   former-p)
            (incf (output-value (output-action ll-node))
                   current-p)
            (setf (output-copy (partial-accumulator ll-node)) 
                  (min 0 (output-value (partial-accumulator ll-node))))
            (if (updater (output-action ll-node))
                `((,#'undo-low-level-node ,(updater (output-action ll-node))))))))

(defgeneric convert-to-node (target *graph*))

(defmethod convert-to-node :after ((target basic-solution) *graph*)
      (loop for r in (routes target) do
          (convert-to-node r *graph*)))

(defmethod convert-to-node :after ((target has-clients) *graph*)
     (progn
         (loop for c in (clients target) do
         (convert-to-node c *graph*))))

(defmethod convert-to-node :after ((target has-vehicles) *graph*)
     (progn
         (loop for v in (vehicles target) do
         (convert-to-node v *graph*))))

(defmethod convert-to-node :after ((target has-multi-depots) *graph*)
  (loop for d in (depots target) do
      (if (gethash d (class-to-io *graph*))
           nil 
          (convert-to-node d *graph*))))

(defmethod convert-to-node :after ((target basic-route) *graph*)
  (progn
    (convert-to-node (vehicle target) *graph*)
    (let* ((new-r (input-node target)))
      (progn
	(setf (inputs *graph*) (append (inputs *graph*) `(,new-r)))
	(setf (gethash target (class-to-io *graph*)) new-r)))))

(defmethod convert-to-node :after ((target route-for-simulation) *graph*)
     (progn
         (convert-to-node (prev-client target) *graph*)))

;;(defmethod convert-to-node :after ((target basic-client))
;;     (let ((new-c (new-input-distance-node target)))
;;         (progn
;;             (setf (inputs *graph*) (append (inputs *graph*) `(,new-c)))
;;             (setf (gethash target (class-to-io *graph*)) new-c))))

(defmethod convert-to-node :after ((target demand-client) *graph*)
     (let ((new-c (new-input-distance-demand-node target)))
         (progn
             (setf (inputs *graph*) (append (inputs *graph*) `(,new-c)))
             (setf (gethash target (class-to-io *graph*)) new-c))))

(defmethod convert-to-node :after ((target basic-depot) *graph*)
     (let ((new-c (new-input-depot-node target)))
         (progn
             (setf (inputs *graph*) (append (inputs *graph*) `(,new-c)))
             (setf (gethash target (class-to-io *graph*)) new-c))))

(defmethod convert-to-node :after ((target basic-vehicle) *graph*)
     (let ((new-c (new-input-vehicle-node target)))
         (progn
             (setf (inputs *graph*) (append (inputs *graph*) `(,new-c)))
             (setf (gethash target (class-to-io *graph*)) new-c))))
